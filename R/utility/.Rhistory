View(header)
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json'
header <- add_headers("user-key" = api_key)
res <- GET(url, header)
View(res)
View(res)
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/api/canadian-nutrient-file/food?lang=en&type=json'
header <- add_headers("user-key" = api_key)
res <- GET(url, header)
res <- GET(url, header)
res <- GET(url, header, query(list(lang = 'fr')))
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query(list(lang = 'fr')))
res <- GET(url, header, query = list(lang = 'fr', )))
res <- GET(url, header, query = list(lang = 'fr', ))
res <- GET(url, header, query = list(lang = 'fr'))
res <- GET(url, header, query = list(lang = 'fr', id = 2314))
data = fromJSON(rawToChar(res$content))
View(data)
res <- GET(url, header, query = list(lang = 'en', id = 2314))
View(data)
data = fromJSON(rawToChar(res$content))
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en', id = 2314))
data = fromJSON(rawToChar(res$content))
View(data)
View(data)
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/nutrientname?type=json'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en', id = 2314))
data = fromJSON(rawToChar(res$content))
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
View(data)
?fromJSON
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/nutrientgroup?type=json'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
?sprintf
?stop
usethis::use_test("cn_api")
setwd("~/OneDrive - UBC/MDS/Block 4/534/nutrientr/R/utility")
usethis::use_test("cn_api")
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd')
library(httr)
library(jsonlite)
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/nutrientgroup?type=json&lang=en&id=2314'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
path = 'food'
lang = 'en'
id = NULL
apiKey <- api_key
ua <- user_agent('https://github.com/jufil19/nutrientr')
url <- modify_url("https://cnf-hc-sc-apicast-production.api.canada.ca", path = paste('v1/', path, sep = ''))
query <- list(lang = lang, id = id, type = 'json')
header <- add_headers("user-key" = apiKey)
url <- "https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food"
res <- GET(url, ua, header, query = query)
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd')
#' cn_api
#' Makes a query to the Canadian Nutrient Files API.
#'
#' @param path the path to the desired endpoint. (Should be one of food, nutrientamount
#' nutrientgroup, nutrientname, nutrientsource, refuseamount, servingsize, or yieldamount.)
#' @param userKey key to access the API. Can be retrieved from <https://hc-sc.api.canada.ca/en/detail?api=cnf#!/Nutrient/get_nutrientamount>.
#' If none is provided, @seealso [get_key()] will check the system environments for one.
#' @param id the id of what you're looking for. Meaning of the id changes depending on endpoint.
#' @param lang the language you are using and want results returned in.
#'
#' @return a structure with the parsed text response, the raw response, the endpoint path, and the id.
#'
#' @references Note that this function is based on, and repeats much of the code in
#' the R API package best practices,
#' available at <https://httr.r-lib.org/articles/api-packages.html#overall-design-1>.
#'
#' @examples
#' cn_api("food")
#' cn_api("food", id = 2314)
#'
#' @export
#'
cn_api <- function(path, apiKey = NULL, id = NULL, lang = "en") {
if (is.null(path)){
stop("You need to specify and endpoint.")
}
# Should no key be provided, check to see if one
# is saved as as a system variable.
if (is.null(apiKey)) {
apiKey <- get_key()
}
# Set a user agent.
ua <- user_agent('https://github.com/jufil19/nutrientr')
# Make sure all the necessary components are ready to make a query.
url <- modify_url("https://cnf-hc-sc-apicast-production.api.canada.ca", path = paste('v1/', path, sep = ''))
query <- list(lang = lang, id = id, type = 'json')
header <- add_headers("user-key" = apiKey)
resp <- GET(url, ua, header, query = query)
# Need to verify output was JSON as it should be.
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Now parse the text output from the response.
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
# Check status code to make sure query was successful and if not provide useful errors.
if (status_code(resp) != 200) {
stop(
paste("Canadian Nutrient File API request failed:", status_code(resp), parsed$Message, parsed$documentation_url),
call. = FALSE
)
}
# Return all of the relevant information in a structure for easy access.
structure(
list(
content = parsed,
path = path,
id = id,
response = resp
),
class = "cn_api"
)
}
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd')
View(resp)
import nutrientr
library(nutrientr)
test_that("food endpoint is reachable", {
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
library(testthat)
test_that("food endpoint is reachable", {
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2b')
testthat::test_that("When incorrect key to the API is given, error is thrown", {
skip_if_no_key()
incorrect_key <- "incorrect"
expect_error(cn_api(path = "food", apiKey = incorrect_key, id = 2314))
})
skip_if_no_key <- function() {
if (Sys.getenv("CN_API") == "") {
skip("No API key available")
}
}
testthat::test_that("When incorrect key to the API is given, error is thrown", {
skip_if_no_key()
incorrect_key <- "incorrect"
expect_error(cn_api(path = "food", apiKey = incorrect_key, id = 2314))
})
incorrrect_key = 'me'
testthat::test_that("When incorrect key to the API is given, error is thrown", {
skip_if_no_key()
incorrect_key <- "incorrect"
expect_error(cn_api(path = "food", apiKey = incorrect_key, id = 2314))
})
incorrect_key = 'me'
testthat::test_that("When incorrect key to the API is given, error is thrown", {
skip_if_no_key()
incorrect_key <- "incorrect"
expect_error(cn_api(path = "food", apiKey = incorrect_key, id = 2314))
})
testthat::test_that("When incorrect key to the API is given, error is thrown", {
incorrect_key <- "incorrect"
expect_error(cn_api(path = "food", apiKey = incorrect_key, id = 2314))
})
test_that("food endpoint is reachable", {
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id = 1)
expect_equal(resp$response$status_code, 200)
})
test_that("nutrientamount endpoint is reachable", {
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
test_that("nutrientamount endpoint is reachable", {
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd', id=1)
expect_equal(resp$response$status_code, 200)
})
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd', id=1)
View(res)
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
View(resp)
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd', id=626)
View(resp)
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd')
test_that("nutrientamount endpoint is reachable", {
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd', id=1)
expect_equal(resp$response$status_code, 200)
})
test_that("nutrientgroup is reachable", {
resp <- cn_api('nutrientgroup', '664fbadd34e6c2ca75235709f9ede2bd', id = 1)
expect_equal(resp$response$status_code, 200)
})
test_that("nutrientname endpoint is reachable", {
resp <- cn_api('nutrientname', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
test_that("nutrientsource endpoint is reachable", {
resp <- cn_api('nutrientsource', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
test_that("refuseamount endpoint is reachable", {
resp <- cn_api('refuseamount', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
test_that("servingsize endpoint is reachable", {
resp <- cn_api('servingsize', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
test_that("yieldamount endpoint is reachable", {
resp <- cn_api('yieldamount', '664fbadd34e6c2ca75235709f9ede2bd')
expect_equal(resp$response$status_code, 200)
})
View(resp)
View(resp)
View(resp)
View(resp)
View(ua)
View(resp)
as.data.frame(resp$content)
x <- as.data.frame(resp$content)
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd', id=626)
View(resp)
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2b')
#' cn_api
#' Makes a query to the Canadian Nutrient Files API.
#'
#' @param path the path to the desired endpoint. (Should be one of food, nutrientamount
#' nutrientgroup, nutrientname, nutrientsource, refuseamount, servingsize, or yieldamount.)
#' @param userKey key to access the API. Can be retrieved from <https://hc-sc.api.canada.ca/en/detail?api=cnf#!/Nutrient/get_nutrientamount>.
#' If none is provided, @seealso [get_key()] will check the system environments for one.
#' @param id the id of what you're looking for. Meaning of the id changes depending on endpoint.
#' @param lang the language you are using and want results returned in.
#'
#' @return a structure with the parsed text response, the raw response, the endpoint path, and the id.
#'
#' @references Note that this function is based on, and repeats much of the code in
#' the R API package best practices,
#' available at <https://httr.r-lib.org/articles/api-packages.html#overall-design-1>.
#'
#' @examples
#' cn_api("food")
#' cn_api("food", id = 2314)
#'
#' @export
#'
cn_api <- function(path, apiKey = NULL, id = NULL, lang = "en") {
if (is.null(path)){
stop("You need to specify and endpoint.")
}
# Should no key be provided, check to see if one
# is saved as as a system variable.
if (is.null(apiKey)) {
apiKey <- get_key()
}
# Set a user agent.
ua <- user_agent('https://github.com/jufil19/nutrientr')
# Make sure all the necessary components are ready to make a query.
url <- modify_url("https://cnf-hc-sc-apicast-production.api.canada.ca", path = paste('v1/', path, sep = ''))
query <- list(lang = lang, id = id, type = 'json')
header <- add_headers("user-key" = apiKey)
resp <- GET(url, ua, header, query = query)
# Need to verify output was JSON as it should be.
#  if (http_type(resp) != "application/json") {
#    stop("API did not return json", call. = FALSE)
#  }
# Now parse the text output from the response.
parsed <- jsonlite::fromJSON(rawToChar(resp$content))
# Check status code to make sure query was successful and if not provide useful errors.
if (status_code(resp) != 200) {
stop(
paste("Canadian Nutrient File API request failed:", status_code(resp), parsed$Message, parsed$documentation_url),
call. = FALSE
)
}
# Return all of the relevant information in a structure for easy access.
structure(
list(
content = parsed,
path = path,
id = id,
response = resp
),
class = "cn_api"
)
}
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2b')
source("~/OneDrive - UBC/MDS/Block 4/534/nutrientr/R/utility/cn_api.R")
debugSource("~/OneDrive - UBC/MDS/Block 4/534/nutrientr/R/utility/cn_api.R")
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2b')
View(resp)
?rawToChar
View(resp)
rawToChar(resp$content)
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2b')
#' cn_api
#' Makes a query to the Canadian Nutrient Files API.
#'
#' @param path the path to the desired endpoint. (Should be one of food, nutrientamount
#' nutrientgroup, nutrientname, nutrientsource, refuseamount, servingsize, or yieldamount.)
#' @param userKey key to access the API. Can be retrieved from <https://hc-sc.api.canada.ca/en/detail?api=cnf#!/Nutrient/get_nutrientamount>.
#' If none is provided, @seealso [get_key()] will check the system environments for one.
#' @param id the id of what you're looking for. Meaning of the id changes depending on endpoint.
#' @param lang the language you are using and want results returned in.
#'
#' @return a structure with the parsed text response, the raw response, the endpoint path, and the id.
#'
#' @references Note that this function is based on, and repeats much of the code in
#' the R API package best practices,
#' available at <https://httr.r-lib.org/articles/api-packages.html#overall-design-1>.
#'
#' @examples
#' cn_api("food")
#' cn_api("food", id = 2314)
#'
#' @export
#'
cn_api <- function(path, apiKey = NULL, id = NULL, lang = "en") {
if (is.null(path)){
stop("You need to specify and endpoint.")
}
# Should no key be provided, check to see if one
# is saved as as a system variable.
if (is.null(apiKey)) {
apiKey <- get_key()
}
# Set a user agent.
ua <- user_agent('https://github.com/jufil19/nutrientr')
# Make sure all the necessary components are ready to make a query.
url <- modify_url("https://cnf-hc-sc-apicast-production.api.canada.ca", path = paste('v1/', path, sep = ''))
query <- list(lang = lang, id = id, type = 'json')
header <- add_headers("user-key" = apiKey)
resp <- GET(url, ua, header, query = query)
# Need to verify output was JSON as it should be.
if (http_type(resp) != "application/json") {
# Check status code since the API doesn't return json if there is an error.
if (status_code(resp) != 200) {
stop(
paste("Canadian Nutrient File API request failed:", status_code(resp), rawToChar(resp$content)),
call. = FALSE
)
}
# Otherwise the call was valid but response was not json.
stop("API did not return json", call. = FALSE)
}
# Now parse the text output from the response.
parsed <- jsonlite::fromJSON(rawToChar(resp$content))
# Check status code to make sure query was successful and if not provide useful errors.
if (status_code(resp) != 200) {
stop(
paste("Canadian Nutrient File API request failed:", status_code(resp), parsed$Message, parsed$documentation_url),
call. = FALSE
)
}
# Return all of the relevant information in a structure for easy access.
structure(
list(
content = parsed,
path = path,
id = id,
response = resp
),
class = "cn_api"
)
}
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2b')
resp <- cn_api('nutrientamount', '664fbadd34e6c2ca75235709f9ede2bd', id=626, lang = 'fr')
View(resp)
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id=2314, lang = 'fr')
#' cn_api
#' Makes a query to the Canadian Nutrient Files API.
#'
#' @param path the path to the desired endpoint. (Should be one of food, nutrientamount
#' nutrientgroup, nutrientname, nutrientsource, refuseamount, servingsize, or yieldamount.)
#' @param userKey key to access the API. Can be retrieved from <https://hc-sc.api.canada.ca/en/detail?api=cnf#!/Nutrient/get_nutrientamount>.
#' If none is provided, @seealso [get_key()] will check the system environments for one.
#' @param id the id of what you're looking for. Meaning of the id changes depending on endpoint.
#' @param lang the language you are using and want results returned in.
#'
#' @return a structure with the parsed text response, the raw response, the endpoint path, and the id.
#'
#' @references Note that this function is based on, and repeats much of the code in
#' the R API package best practices,
#' available at <https://httr.r-lib.org/articles/api-packages.html#overall-design-1>.
#'
#' @examples
#' cn_api("food")
#' cn_api("food", id = 2314)
#'
#' @export
#'
cn_api <- function(path, apiKey = NULL, id = NULL, lang = "en") {
if (is.null(path)){
stop("You need to specify and endpoint.")
}
# Should no key be provided, check to see if one
# is saved as as a system variable.
if (is.null(apiKey)) {
apiKey <- get_key()
}
# Set a user agent.
ua <- user_agent('https://github.com/jufil19/nutrientr')
# Make sure all the necessary components are ready to make a query.
url <- modify_url("https://cnf-hc-sc-apicast-production.api.canada.ca", path = paste('v1/', path, sep = ''))
query <- list(lang = lang, id = id, type = 'json')
header <- add_headers("user-key" = apiKey)
resp <- GET(url, ua, header, query = query)
# Need to verify output was JSON as it should be.
if (http_type(resp) != "application/json") {
# Check status code since the API doesn't return json if there is an error.
if (status_code(resp) != 200) {
stop(
paste("Canadian Nutrient File API request failed:", status_code(resp), rawToChar(resp$content)),
call. = FALSE
)
}
# Otherwise the call was valid but response was not json.
stop("API did not return json", call. = FALSE)
}
# Now parse the text output from the response.
parsed <-  jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
# Check status code to make sure query was successful and if not provide useful errors.
if (status_code(resp) != 200) {
stop(
paste("Canadian Nutrient File API request failed:", status_code(resp), parsed$Message, parsed$documentation_url),
call. = FALSE
)
}
# Return all of the relevant information in a structure for easy access.
structure(
list(
content = parsed,
path = path,
id = id,
response = resp
),
class = "cn_api"
)
}
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id=2314, lang = 'fr')
View(resp)
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', lang = 'fr')
View(resp)
View(resp)
resp$content[[1]]
test <- as.data.frame(resp$content)
View(test)
? as.data.frame
? as.data.frame.complex
test <- as.data.frame(resp$content, make.names = FALSE)
test <- as.data.frame(do.call(rbind, resp$content))
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id=2315, lang = 'fr')
View(resp)
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id=c(2314, 2315), lang = 'fr')
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id='2314, 2315'', lang = 'fr')
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id='2314, 2315', lang = 'fr')
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id='2314&2315', lang = 'fr')
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id='2314|2315', lang = 'fr')
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id='2314 2315', lang = 'fr')
resp <- cn_api('food', '664fbadd34e6c2ca75235709f9ede2bd', id='2315', lang = 'fr')
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/nutrientgroup?type=json&lang=en&id=2314&id=2315'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
View(res)
View(res)
res$content
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/nutrientgroup?type=json&lang=%272314%27%20OR%20%272315%27'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
View(res)
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json&lang=%272314%27%20OR%20%272315%27'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json&lang=en&id=%272314%27%20OR%20%272315%27'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json&lang=en&id=2314OR2315'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json&lang=en&id=2314|id=2315'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
api_key <- '664fbadd34e6c2ca75235709f9ede2bd'
url <- 'https://cnf-hc-sc-apicast-production.api.canada.ca/v1/food?type=json&lang=en&id=2314,2315'
header <- add_headers("user-key" = api_key)
res <- GET(url, header, query = list(lang = 'en'))
data = fromJSON(rawToChar(res$content))
View(data)
